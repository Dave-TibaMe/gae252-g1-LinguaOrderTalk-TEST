# .github/workflows/deploy-slash.yml 20250806 1205
# [非 Docker 版本] 直接部署到 VM，拉取程式碼並重新啟動 Python 應用

name: 'Deploy to VM: Slash'

on:
  push:
    branches:
      - main
    paths:
      - 'deployment/Slash/**'
      - '.github/workflows/deploy-slash.yml'
  workflow_dispatch:

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_VM_ZONE: ${{ secrets.GCP_VM_ZONE }}
  GCP_VM_NAME: ${{ secrets.GCP_VM_NAME }}
  GCP_VM_USER: ${{ secrets.GCP_VM_USER }}

jobs:
  deploy-to-vm:
    name: 'Deploy Python App to VM'
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: '1. Checkout code'
        uses: actions/checkout@v4

      - name: '2. Authenticate to Google Cloud'
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: '3. Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: '4. Deploy to Google Compute Engine'
        run: |
          gcloud compute ssh ${{ env.GCP_VM_USER }}@${{ env.GCP_VM_NAME }} --zone ${{ env.GCP_VM_ZONE }} --project ${{ env.GCP_PROJECT_ID }} -- << EOF
            # 如果任何指令失敗，則立即停止腳本
            set -e

            # 在 VM 上的專案路徑和應用程式進入點
            PROJECT_DIR="/home/${{ env.GCP_VM_USER }}/lingua-order-talk-backend"
            APP_ENTRYPOINT="deployment/Slash/app.py"

            echo "--- 1. Navigating to project directory: \${PROJECT_DIR} ---"
            cd \${PROJECT_DIR}

            echo "--- 2. Pulling latest code from main branch ---"
            git pull origin main

            echo "--- 3. Activating Python virtual environment ---"
            source venv/bin/activate

            echo "--- 4. Installing/updating Python dependencies ---"
            pip install -r deployment/Slash/requirements.txt

            echo "--- 5. Creating .env file with secrets ---"
            # 這個 .env 檔案會被 Python 的 dotenv 函式庫讀取
            cat > deployment/Slash/.env << EOT
            DB_TYPE='${{ secrets.DB_TYPE }}'
            DB_HOST='${{ secrets.DB_HOST }}'
            DB_USER='${{ secrets.DB_USER }}'
            DB_PASSWORD='${{ secrets.DB_PASSWORD }}'
            DB_DATABASE='${{ secrets.DB_DATABASE }}'
            EOT

            echo "--- 6. Stopping the old application process (if running) ---"
            # 使用 pkill 來尋找並停止正在運行的 app.py 進程
            # [a]pp.py 寫法是為了防止 pkill 指令找到自己
            pkill -f "python3 \${PROJECT_DIR}/${APP_ENTRYPOINT}" || echo "Application not running, which is fine."

            echo "--- 7. Starting the new application process in the background ---"
            # 使用 nohup 讓程式在 SSH 登出後繼續運行，並將日誌寫入 app.log
            nohup python3 \${APP_ENTRYPOINT} > \${PROJECT_DIR}/app.log 2>&1 &

            # 停用虛擬環境
            deactivate

            echo "--- Deployment to VM completed successfully! ---"
          EOF