# .github/workflows/deploy-slash.yml
# 完整 CI/CD 流程: 使用服務帳戶金鑰認證，建置 Docker 鏡像，推送到 Artifact Registry，並部署到 GCP VM

name: 'Build, Push, and Deploy: Slash'

on:
  push:
    branches:
      - main # 當 main 分支有更新時觸發
    paths:
      - 'deployment/Slash/**' # 只在 Slash 目錄有變動時觸發
      - '.github/workflows/deploy-slash.yml' # 當 workflow 本身變動時也觸發
  workflow_dispatch: # 允許手動觸發

env:
  # --- GCP & Artifact Registry 設定 ---
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_VM_ZONE: ${{ secrets.GCP_VM_ZONE }}
  GCP_ARTIFACT_LOCATION: 'asia-east1'
  GCP_ARTIFACT_REPO: 'docker-repo-store-backend'
  
  # --- VM & 應用程式設定 ---
  GCP_VM_NAME: ${{ secrets.GCP_VM_NAME }}
  GCP_VM_USER: ${{ secrets.GCP_VM_USER }}
  APP_NAME: 'slash-app' # Docker 容器的名稱
  APP_DIR: 'deployment/Slash' # 您專案中包含 Dockerfile 的目錄
  
  # --- 鏡像路徑與標籤 ---
  IMAGE_PATH: ${{ secrets.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REPO }}/${{ env.APP_NAME }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-push-and-deploy:
    name: 'Build, Push Docker and Deploy to VM'
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: '1. Checkout code'
        uses: actions/checkout@v4

      - name: '2. Authenticate to Google Cloud'
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: '3. Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: '4. Configure Docker for Artifact Registry'
        run: gcloud auth configure-docker ${{ env.GCP_ARTIFACT_LOCATION }}-docker.pkg.dev

      - name: '5. Build and Push Docker Image'
        run: |
          docker build -t ${{ env.GCP_ARTIFACT_LOCATION }}-docker.pkg.dev/${{ env.IMAGE_PATH }}:${{ env.IMAGE_TAG }} ${{ env.APP_DIR }}
          docker push ${{ env.GCP_ARTIFACT_LOCATION }}-docker.pkg.dev/${{ env.IMAGE_PATH }}:${{ env.IMAGE_TAG }}

      - name: '6. Deploy to Google Compute Engine'
        run: |
          gcloud compute ssh ${{ env.GCP_VM_USER }}@${{ env.GCP_VM_NAME }} --zone ${{ env.GCP_VM_ZONE }} --project ${{ env.GCP_PROJECT_ID }} -- << EOF
            set -e

            echo "--- 1. Authenticating Docker on VM ---"
            gcloud auth configure-docker ${{ env.GCP_ARTIFACT_LOCATION }}-docker.pkg.dev

            echo "--- 2. Pulling the latest Docker image ---"
            docker pull ${{ env.GCP_ARTIFACT_LOCATION }}-docker.pkg.dev/${{ env.IMAGE_PATH }}:${{ env.IMAGE_TAG }}

            echo "--- 3. Stopping and removing the old container (if it exists) ---"
            docker stop ${{ env.APP_NAME }} || true
            docker rm ${{ env.APP_NAME }} || true

            echo "--- 4. Starting the new container ---"
            docker run -d --name ${{ env.APP_NAME }} -p 80:5000 --restart always \
              -e DB_TYPE='${{ secrets.DB_TYPE }}' \
              -e DB_HOST='${{ secrets.DB_HOST }}' \
              -e DB_USER='${{ secrets.DB_USER }}' \
              -e DB_PASSWORD='${{ secrets.DB_PASSWORD }}' \
              -e DB_DATABASE='${{ secrets.DB_DATABASE }}' \
              ${{ env.GCP_ARTIFACT_LOCATION }}-docker.pkg.dev/${{ env.IMAGE_PATH }}:${{ env.IMAGE_TAG }}

            echo "--- 5. Cleaning up old Docker images ---"
            docker image prune -af

            echo "--- Deployment to VM completed successfully! ---"
          EOF